5일차>>

* Fragments => '조각'개념.
: 페이지를 여러개 만들었을 때 => 공통된 요소들이 존재하고 그 부분들을 한 공간(별도의 페이지)에 모아놓고 필요한 경우 그 요소들을 불러와서 사용하는 개념.(타일즈와 비슷한개념이지만 별도의 라이브러리가 필요없다는 차이점이 있음)
  하나의 페이지에 여러개의 Fragments가 존재할 수 있음(폴더 common, config 생성 // config : head(공통된 설정요소)
  사용하기 위해서는 fagment 선언이 필요함(th:fragment="fragment 이름")		
		 사용방법 => replace(해당 태그를 대체), insert(하위태그로 들어간다) 예) th:replace="~{common/configs/default_config :: jQueryConfig}"
		 
 fragments 폴더 : header, sidebar, footer  
 layouts 폴더 : fragments 폴더의 내용을 적용
 
 <<SOP, CORS>> (주체 : 브라우저)
 Same-Origin-Policy : 같은 오리진(프로토콜, 호스트명, 포트가 같음)을 공유하는 내가 만든 페이지만 접근이 가능 
 Cross-Origin Resource Sharing : 예외사항을 두고 다른 오리진 사이의(Cross-Origin) 2가지 방식으로(토큰, 오리진 설정) Resrouce를 공유하는 정책                               
 
 ==> 서버사이의 통신 : CORS를 회피하기 위한 방법은 아니었지만 화면단에서 AJAX끼리의 통신이 워낙 활발하다보니 사용빈도수가 떨어졌을뿐.
 				    특정시간/특정 주기별로 데이터를 업데이트 해야하는 경우 서버끼리의 통신을 이용함(예:일일 날씨 업데이트)
 
집가서 확인> 기존의 전통방식(page기반)의 컨트롤러가 아니라 REST방식으로 컨트롤러를 만들기(EmpRestController)
 
 RestController의 경우 페이지가 필요없기 때문에 컨트롤러가 하나씩이면 됨.
 querystring, json (필요에 따라(예:상세검색)
집가서 확인> 수정 : PUT => emps/100(2가지 방식 혼용 : 경로에 값이 없는 경우도 있음)
 
 ?뒤 : 데이터로 인식
 /뒤 : 경로로 인식
 
 rest방식의 통신방식은 json이 기본 => 데이터만 넘어옴
 REST : URI 설계
 
 <AOP>  
 1) 관심분리 : 횡단관심 / 핵심관심 2가지로 분리
횡단관심(=부가기능) : 메소드를 옆으로 나열시켰을 때 공통적인 요소(로깅처리, 권한체크, 트랜잭션처리, 예외처리) => 부가기능을 모듈형태로 설계하고 개발 : AOP
핵심관심 : 횡단관심을 분리하고 남은 핵심 로직에 관한 부분 

분리하는 이유 ==> 유지보수

AOP는 설계가 쉽지 않음(데이터를 넘기는 부분에서)
공통적으로 추가해야할 부분이 생기면 AOP를 적용시키는걸 고려해볼것

pom.xml => 메이븐 사이트에서 spring boot AOP 검색 후 첫번째 => (아무 버전이나 상관없음)pom.xml에 추가

*Autocommit을 해제해야 할 사항
: 은행예금 출금 => 입급 
 
 <트랜잭션 AOP>
 사용장소 : @Service가 붙은 메소드 위에 사용
 
  
 
 <<과제>>
 department 테이블 활용
 VO, 매퍼, 서비스, 컨트롤러(REST 방식 제외), 화면 추가
 