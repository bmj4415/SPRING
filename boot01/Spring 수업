5일차>>

* Fragments => '조각'개념.
: 페이지를 여러개 만들었을 때 존재하는 공통된 요소들을 한 공간(별도의 페이지)에 모아놓고 필요한 경우 그 요소들을 불러와서 사용하는 개념.(타일즈와 비슷한개념이지만 별도의 라이브러리가 필요없다는 차이점이 있음)
  하나의 페이지에 여러개의 Fragments가 존재할 수 있음(폴더 common, config 생성)
  사용하기 위해서는 fagment 선언이 필요함(th:fragment="fragment의 이름")		
    사용 => replace(해당 태그를 대체), insert(호출한 태그의 하위태그로 삽입) 예) th:replace="~{common/configs/default_config :: jQueryConfig}"
    																 th:insert="~{common/fragments/header :: HeaderFrag}"				
		
 fragments 폴더 : header, sidebar, footer  
 layouts 폴더 : fragments 폴더의 내용들을 한곳에 모아놓음
 
 <<SOP, CORS>> (주체 : 브라우저)
 Same-Origin-Policy(SOP) : 같은 오리진(프로토콜, 호스트명, 포트가 같음)을 공유하는, 해당 사이트 내의 페이지 끼리만 접근이 가능 
 Cross-Origin Resource Sharing(CORS) : 도메인이 다른 서버끼리 리소스를 주고 받을 때 보안을 위해 설정된 정책                            
 
 ==> 서버사이의 통신 : CORS를 회피하기 위한 방법은 아니었지만 화면단에서 AJAX끼리의 통신이 워낙 활발하다보니 사용빈도수가 떨어졌을뿐 기존에 존재하던 방식임.
 				    특정시간/특정 주기별로 데이터를 업데이트 해야하는 경우 서버끼리의 통신을 이용하는게 용이함.(예:일일 날씨 업데이트)
 
 
 <<REST 방식>>
 
집가서 확인할것>> 기존의 전통방식(page기반)의 컨트롤러와 REST방식의 컨트롤러
 
RestController의 경우 페이지가 필요없기 때문에 컨트롤러가 하나씩이면 됨.

경로 => ?뒤 : 데이터로 인식
경로 => /뒤 : 경로로 인식
 
REST 방식의 통신방식은 json이 기본 => 따라서 화면단에서의 통신과 달리 json형식의 데이터만 넘어감.
 
 
 <<AOP>>  
관심분리 : [횡단관심 / 핵심관심] 2가지로 분리
횡단관심(=부가기능) : 메소드간의 공통적인 요소(로깅처리, 권한체크, 트랜잭션처리, 예외처리) => 부가기능을 모듈형태로 설계하고 개발 : AOP
핵심관심 : 횡단관심을 분리하고 남은 핵심 로직에 관한 부분 
분리하는 이유 ==> 유지보수

AOP는 설계가 쉽지 않음(특히 데이터를 넘기는 부분에서) 하지만 편리한 부분이 많기 때문에 공통적으로 추가해야할 부분이 생기면 AOP를 적용시키는걸 고려해볼것

(실습) pom.xml => 메이븐 사이트에서 spring boot AOP 검색 후 첫번째 => (아무 버전이나 상관없음)pom.xml에 추가

 
<<트랜잭션 AOP>>
사용장소 : @Service가 붙은 메소드 위에 사용
 
 
 <<과제>>
departments 테이블 활용
VO, 매퍼, 서비스, 컨트롤러(REST 방식으로 만드는건 제외), 화면 추가


6일차>>

* multipart/form-data : 내부에 파일에 대한 정보가 들어가있는 리퀘스트
* multipartResolver : 인터페이스(구현클래스는 여러가지가 있음. 부트3에서는 StandardServletMultipartResolver, 부트2에서는 아파치에서 제공하는 CommonsMultipartResolver 등도 있음)

spring.servlet.multipart.file-size-threshold=0B : 메모리에 올려놓을 파일 사이즈를 지정
spring.servlet.multipart.location=C:/Temp : 경로구분자 변경필요함(\->/)공간의 경로지정(파일 업로드시 오류가 발생할때 그게 서버의 문제인지 메모리의 문제인지 확인하고자 할 때 유용)
spring.servlet.multipart.max-file-size=1MB : 업로드 가능한 파일의 최대크기 지정(개별파일), 1048576(=1MB, 부트에서만 자동변환해줌)
spring.servlet.multipart.max-request-size=10MB : 다중 파일의 경우 하나의 리퀘스트에 들어갈 수 있는 파일의 최대 크기 지정, 10485760(=10MB)


보안>>

필터 : 사용자의 요청이 들어오면 필터에서 순차적으로 걸러져 들어옴

ssh : userdetailsService가 아니라 provider에서

시큐리티(pom.xml에서 검색=> 시큐리티=> 스프링 시큐리티) => FrontController에 접근하기도 전에 차단을 걺

hasRole : 하나의 권한만 설정가능
hasAnyRole : 동시에 여러개의 권한을 설정하고 싶을 때

UserDetails <= UserVO(userdetails를 기반으로 만들어짐)
UserDetails <= Login UserVO(














 